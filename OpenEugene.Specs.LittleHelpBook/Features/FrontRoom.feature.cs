// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace OpenEugene.Specs.LittleHelpBook.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class FrontRoomSpecsScenariosAndBehaviorsFeature : object, Xunit.IClassFixture<FrontRoomSpecsScenariosAndBehaviorsFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private static global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "FrontRoom.feature"
#line hidden
        
        public FrontRoomSpecsScenariosAndBehaviorsFeature(FrontRoomSpecsScenariosAndBehaviorsFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(null, global::Reqnroll.xUnit.ReqnrollPlugin.XUnitParallelWorkerTracker.Instance.GetWorkerId());
            global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Front Room Specs Scenarios and Behaviors", "Access Rights and Information Management", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            string testWorkerId = testRunner.TestWorkerId;
            await testRunner.OnFeatureEndAsync();
            testRunner = null;
            global::Reqnroll.xUnit.ReqnrollPlugin.XUnitParallelWorkerTracker.Instance.ReleaseWorker(testWorkerId);
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="As a front room staff member, I need to update information in the system.")]
        [Xunit.TraitAttribute("FeatureTitle", "Front Room Specs Scenarios and Behaviors")]
        [Xunit.TraitAttribute("Description", "As a front room staff member, I need to update information in the system.")]
        public async System.Threading.Tasks.Task AsAFrontRoomStaffMemberINeedToUpdateInformationInTheSystem_()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("As a front room staff member, I need to update information in the system.", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await testRunner.GivenAsync("I am logged into the system,", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 6
await testRunner.WhenAsync("I navigate to the resource listing,", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 7
await testRunner.ThenAsync("I should be able to comment on the listing.", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="As an administrator, I need to edit information in the system.")]
        [Xunit.TraitAttribute("FeatureTitle", "Front Room Specs Scenarios and Behaviors")]
        [Xunit.TraitAttribute("Description", "As an administrator, I need to edit information in the system.")]
        public async System.Threading.Tasks.Task AsAnAdministratorINeedToEditInformationInTheSystem_()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("As an administrator, I need to edit information in the system.", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 9
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 10
await testRunner.GivenAsync("I am logged into the system as an administrator,", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 11
await testRunner.WhenAsync("I navigate to the resource listing,", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 12
await testRunner.ThenAsync("I should be able to edit the listing.", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="As an administrator, I need to be notified of comments on resource listings.")]
        [Xunit.TraitAttribute("FeatureTitle", "Front Room Specs Scenarios and Behaviors")]
        [Xunit.TraitAttribute("Description", "As an administrator, I need to be notified of comments on resource listings.")]
        public async System.Threading.Tasks.Task AsAnAdministratorINeedToBeNotifiedOfCommentsOnResourceListings_()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("As an administrator, I need to be notified of comments on resource listings.", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 14
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 15
await testRunner.GivenAsync("a front room staff member comments on a resource listing,", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 16
await testRunner.WhenAsync("the comment is submitted,", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 17
await testRunner.ThenAsync("I should receive an email notification.", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="As a front room staff member, I need to provide clients with resource information" +
            ".")]
        [Xunit.TraitAttribute("FeatureTitle", "Front Room Specs Scenarios and Behaviors")]
        [Xunit.TraitAttribute("Description", "As a front room staff member, I need to provide clients with resource information" +
            ".")]
        public async System.Threading.Tasks.Task AsAFrontRoomStaffMemberINeedToProvideClientsWithResourceInformation_()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("As a front room staff member, I need to provide clients with resource information" +
                    ".", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 19
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 20
await testRunner.GivenAsync("I am assisting a client,", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 21
await testRunner.WhenAsync("I search for resources in the system,", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 22
await testRunner.ThenAsync("I should be able to compile and print a personalized list of resources for the cl" +
                        "ient.", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="As a front room staff member, I need to report inaccuracies in resource informati" +
            "on.")]
        [Xunit.TraitAttribute("FeatureTitle", "Front Room Specs Scenarios and Behaviors")]
        [Xunit.TraitAttribute("Description", "As a front room staff member, I need to report inaccuracies in resource informati" +
            "on.")]
        public async System.Threading.Tasks.Task AsAFrontRoomStaffMemberINeedToReportInaccuraciesInResourceInformation_()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("As a front room staff member, I need to report inaccuracies in resource informati" +
                    "on.", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 24
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 25
await testRunner.GivenAsync("I find inaccurate information in the resource listing,", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 26
await testRunner.WhenAsync("I comment on the listing,", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 27
await testRunner.ThenAsync("the administrator should be notified to review and correct the information.", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="As a project team member, I need to understand my role and responsibilities.")]
        [Xunit.TraitAttribute("FeatureTitle", "Front Room Specs Scenarios and Behaviors")]
        [Xunit.TraitAttribute("Description", "As a project team member, I need to understand my role and responsibilities.")]
        public async System.Threading.Tasks.Task AsAProjectTeamMemberINeedToUnderstandMyRoleAndResponsibilities_()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("As a project team member, I need to understand my role and responsibilities.", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 29
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 30
await testRunner.GivenAsync("I am part of the project team,", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 31
await testRunner.WhenAsync("I review the project plan,", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 32
await testRunner.ThenAsync("I should see clear roles and responsibilities assigned to each team member.", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="As a project team member, I need to communicate effectively with other team membe" +
            "rs.")]
        [Xunit.TraitAttribute("FeatureTitle", "Front Room Specs Scenarios and Behaviors")]
        [Xunit.TraitAttribute("Description", "As a project team member, I need to communicate effectively with other team membe" +
            "rs.")]
        public async System.Threading.Tasks.Task AsAProjectTeamMemberINeedToCommunicateEffectivelyWithOtherTeamMembers_()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("As a project team member, I need to communicate effectively with other team membe" +
                    "rs.", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 34
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 36
await testRunner.GivenAsync("I am working on the project,", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 37
await testRunner.WhenAsync("I need to discuss project details,", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 38
await testRunner.ThenAsync("I should be able to collaborate and communicate with other team members effective" +
                        "ly.", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await FrontRoomSpecsScenariosAndBehaviorsFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await FrontRoomSpecsScenariosAndBehaviorsFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
